from confluent_kafka import SerializingProducer
from confluent_kafka.schema_registry import SchemaRegistryClient
from confluent_kafka.schema_registry.avro import AvroSerializer
from confluent_kafka.serialization import StringSerializer
import requests
import json

# üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Schema Registry
SCHEMA_REGISTRY_URL = "http://localhost:8081"
try:
    response = requests.get(f"{SCHEMA_REGISTRY_URL}/subjects", timeout=5)
    response.raise_for_status()
    print("‚úÖ Schema Registry –¥–æ—Å—Ç—É–ø–µ–Ω")
except requests.exceptions.RequestException as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: Schema Registry –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ({e})")
    exit(1)

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º Avro-—Å—Ö–µ–º—É
SCHEMA_FILE = "../alert-schema.avsc"
try:
    with open(SCHEMA_FILE, "r") as f:
        schema_str = f.read()
except FileNotFoundError:
    print(f"‚ùå –§–∞–π–ª —Å—Ö–µ–º—ã {SCHEMA_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)

# üîπ –ü–æ–¥–∫–ª—é—á–∞–µ–º Schema Registry
schema_registry_client = SchemaRegistryClient({"url": SCHEMA_REGISTRY_URL})
avro_serializer = AvroSerializer(schema_registry_client, schema_str)

# üîπ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Kafka Producer
producer_config = {
    "bootstrap.servers": "localhost:29092,localhost:29093,localhost:29094",  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ Kafka —Ä–∞–±–æ—Ç–∞–µ—Ç
    "key.serializer": StringSerializer("utf_8"),
    "value.serializer": avro_serializer,
}

producer = SerializingProducer(producer_config)

# üîπ –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
alert_data = {
    "id": 1,
    "message": "Test alert",
    "timestamp": "2025-03-21T12:00:00Z"
}

# üîπ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Kafka
topic = "kinaction_schematest"
try:
    producer.produce(
        topic=topic,
        key=str(alert_data["id"]),
        value=alert_data,
        on_delivery=lambda err, msg: print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {msg.topic()}") if not err else print(f"‚ùå –û—à–∏–±–∫–∞: {err}")
    )
    producer.flush()
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Kafka: {e}")
